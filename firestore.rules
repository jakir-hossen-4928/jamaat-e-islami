
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function hasRole(role) {
      return isAuthenticated() && getUserData().role == role;
    }
    
    function isApproved() {
      return isAuthenticated() && getUserData().approved == true;
    }
    
    function canAccessLocation(voterData) {
      let userData = getUserData();
      
      // Super admin can access everything
      if (userData.role == 'super_admin') {
        return true;
      }
      
      // Village admin can only access their village data
      if (userData.role == 'village_admin') {
        return voterData.village_id == userData.accessScope.village_id;
      }
      
      return false;
    }
    
    function canCreateVoterInLocation(voterData) {
      let userData = getUserData();
      
      // Super admin can create anywhere
      if (userData.role == 'super_admin') {
        return true;
      }
      
      // Village admin can only create in their village
      if (userData.role == 'village_admin') {
        return voterData.village_id == userData.accessScope.village_id;
      }
      
      return false;
    }
    
    function canVerifyUser(targetUserData) {
      let userData = getUserData();
      
      // Only super admin can verify users in simplified structure
      if (userData.role == 'super_admin') {
        return targetUserData.role == 'village_admin';
      }
      
      return false;
    }

    // Users collection rules - optimized for production
    match /users/{userId} {
      // Users can read their own profile
      allow read: if isAuthenticated() && request.auth.uid == userId;
      
      // Users can create their own profile during registration (village_admin only)
      allow create: if isAuthenticated() && request.auth.uid == userId && 
                   resource.data.approved == false && 
                   resource.data.role == 'village_admin';
      
      // Super admin can read all users
      allow read: if hasRole('super_admin') && isApproved();
      
      // Super admin can update/delete any user
      allow write: if hasRole('super_admin') && isApproved();
      
      // Super admin can verify village admin users
      allow update: if hasRole('super_admin') && isApproved() && 
                   canVerifyUser(resource.data) &&
                   request.resource.data.diff(resource.data).affectedKeys().hasOnly(['approved', 'verifiedBy', 'lastLogin']);
    }

    // Voters collection rules - heavily optimized for cost reduction
    match /voters/{voterId} {
      // Read access - village admin limited to their village only
      allow read: if isAuthenticated() && isApproved() && canAccessLocation(resource.data);
      
      // Create access - village admin can only create in their village
      allow create: if isAuthenticated() && isApproved() && 
                   canCreateVoterInLocation(request.resource.data) &&
                   request.resource.data.keys().hasAll(['Name', 'ID', 'Last Updated']);
      
      // Update access - super admin can update all, village admin can't update
      allow update: if hasRole('super_admin') && isApproved() && canAccessLocation(resource.data);
      
      // Delete access - only super admin
      allow delete: if hasRole('super_admin') && isApproved();
    }

    // SMS Campaigns collection rules - optimized for village-based campaigns
    match /sms_campaigns/{campaignId} {
      // Read access - village admin can only see their campaigns
      allow read: if isAuthenticated() && isApproved() && 
                 (hasRole('super_admin') || 
                  (resource.data.createdBy == request.auth.uid && 
                   resource.data.locationScope.village_id == getUserData().accessScope.village_id));
      
      // Create access - both roles can create campaigns in their scope
      allow create: if isAuthenticated() && isApproved() && 
                   request.resource.data.createdBy == request.auth.uid &&
                   (hasRole('super_admin') || 
                    (hasRole('village_admin') && 
                     request.resource.data.locationScope.village_id == getUserData().accessScope.village_id));
      
      // Update access - only campaign creator
      allow update: if isAuthenticated() && isApproved() && 
                   resource.data.createdBy == request.auth.uid &&
                   request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'sentCount']);
      
      // Delete access - super admin or campaign creator
      allow delete: if isAuthenticated() && isApproved() && 
                   (hasRole('super_admin') || resource.data.createdBy == request.auth.uid);
    }

    // System logs - super admin only
    match /system_logs/{logId} {
      allow read, write: if hasRole('super_admin') && isApproved();
    }
    
    // Cache collection for performance optimization
    match /cache/{cacheId} {
      allow read, write: if isAuthenticated() && isApproved();
    }
    
    // Analytics - role-based access
    match /analytics/{analyticsId} {
      allow read: if isAuthenticated() && isApproved();
      allow write: if hasRole('super_admin') && isApproved();
    }
    
    // Performance counters for monitoring
    match /performance/{metricId} {
      allow read, write: if hasRole('super_admin') && isApproved();
    }
  }
}
